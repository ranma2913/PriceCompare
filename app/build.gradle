/**
 * App Build Script
 *
 * App Name and Version Variables:
 */
ext {
    //An integer value that represents the version of the application code, relative to other versions.
    androidAppVersionCode = 1
    //An integer value that is the first number in the version name.
    androidAppPrimaryReleaseNumber = 1

    //Increment this number every release that contains UI changes.
    uiVersionCode = 2

    //AppVersionCode relative release version.
    //Increment every update.
    androidAppVersionCode = 10
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        // replace with the current version of the Android plugin
        classpath 'com.android.tools.build:gradle:1.3.0'
        // replace with the current version of the android-apt plugin
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'

    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

apply plugin: 'com.android.application'
apply plugin: 'android-apt'



dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    apt 'org.androidannotations:androidannotations:3.3.2'
    compile 'org.androidannotations:androidannotations-api:3.3.2'
    compile 'com.android.support:appcompat-v7:22.2.1'
    compile 'com.android.support:support-v4:22.2.1'
    compile 'com.google.android.gms:play-services:8.1.0'
    compile 'com.j256.ormlite:ormlite-android:4.48'
}

apt {
    arguments {
        resourcePackageName android.defaultConfig.applicationId
        androidManifestFile variant.outputs[0].processResources.manifestFile
        // if you have multiple outputs (when using splits), you may want to have other index than 0

        // You can set optional annotation processing options here, like these commented options:
        // logLevel 'INFO'
        // logFile '/var/log/aa.log'
    }
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"
    defaultConfig {
        applicationId "com.ranma2913.pricecompare"
        minSdkVersion 9
        targetSdkVersion 23
        versionCode androidAppVersionCode
        versionName computeVersionName()
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def formattedDate = new Date().format('yyyyMMddHHmmss')
                    def newName = output.outputFile.name
                    newName = newName.replace("app-", "$rootProject.ext.appName-" + computeVersionName() + "-")
                    newName = newName.replace("-release", "-release" + formattedDate)
                    //noinspection GroovyAssignabilityCheck
                    output.outputFile = new File(output.outputFile.parent, newName)
                }
            }
        }
        debug {
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    // workaround for "duplicate files during packaging of APK" issue
    // see https://groups.google.com/d/msg/adt-dev/bl5Rc4Szpzg/wC8cylTWuIEJ
    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
}

def computeVersionName() {
    return androidAppPrimaryReleaseNumber + "." + uiVersionCode + "." + androidAppVersionCode()
}

def androidAppVersionCode() {
    return androidAppVersionCode
}
